web_search_task:
  description: >
    Perform targeted Google news searches for {topic} using Serper Dev Tool.
    Focus on finding the most recent and relevant news articles (last 24 hours) from credible sources.
    Current timestamp is {timestamp}.
    The user has this in mind: {my_thoughts}.
    Select the best 3 articles based on:
    - Relevance to the topic
    - Source credibility (prefer established news outlets)
    - Publication date (prioritize most recent)
    - Content quality indicators (length, depth, citations)
  expected_output: >
    A structured JSON object containing:
    - selected_articles: Array of 2-3 articles with metadata:
      * title
      * url
      * source
      * date
      * snippet
      * imageUrl
    - search_parameters: The original search parameters used
      * query
      * date_range
      * language
      * country
  agent: web_research_agent
  output_file: web_search_results.json
  constraints:
    - max_results: 3
    - min_word_count: 500
    - allowed_domains: [nytimes.com, bbc.com, reuters.com, apnews.com, standardmedia.co.ke, citizen.digital, foxnews.com]  # Example of trusted sources

read_and_summarize_task:
  description: >
    Analyze and summarize content from 2-3 articles got from the web_search_task.
    Extract key information and create a comprehensive news summary including:
    - Main points and arguments
    - Important facts and figures
    - Relevant quotes or statements
    - Source credibility assessment
    - Potential biases or limitations
  expected_output: >
    A structured news report in Markdown format containing:
    1. Overview of the topic
    2. Summary of findings from each article (2-3 paragraphs per article)
    3. Key insights and conclusions
    4. Source references with:
       * Title
       * URL
       * Publication date
       * Source name
    The report should be 300-500 words, written in journalistic style.
  agent: web_research_agent
  context: [web_search_task]
  output_file: news_summary.md
  constraints:
    - summary_length: 300-500 words
    - include_source_analysis: true
    - include_key_quotes: true

twitter_scrape_task:
  description: >
    Scrape {max_tweets} tweets about {topic} using the Twitter Scraper tool.
    Collect metadata including content, user, timestamp, and engagement metrics.
    Set is_hashtag={is_hashtag} and the user has this in mind: {my_thoughts}.
    Structure your query to meet the user's needs.
  expected_output: >
    A structured JSON object containing scraped tweets:
    - tweets: Array of tweets with metadata:
      * id
      * content
      * user
      * timestamp
      * likes
      * retweets
      * has_photos
    - trend: The topic being analyzed
    - count: Number of tweets collected
  agent: twitter_analysis_agent
  output_file: twitter_data.json

twitter_sentiment_task:
  description: >
    Analyze the sentiment of tweets collected in the twitter_scrape_task.
    Address the user's thoughts: {my_thoughts}.
  expected_output: >
    A structured sentiment analysis report in Markdown format that addresses the user's thoughts: {my_thoughts}.
  agent: twitter_analysis_agent
  context: [twitter_scrape_task]
  output_file: twitter_sentiment_analysis.md
  constraints:

news_reporting_task:
  description: >
    Report on the latest news about {topic} and ensure it matches user's thoughts: {my_thoughts}.
  expected_output: >
    A structured news report in Markdown format that captures the whole story and addresses the user's thoughts.
    Select author from the list of authors: {authors}.
    This article is in {category} category and story is {story}.
  agent: news_reporter_agent
  context: [twitter_sentiment_task, read_and_summarize_task]
  output_file: news_report.md
  constraints:
    - summary_length: 300-500 words
    - include_source_analysis: true
    - include_key_quotes: true

push_article_to_neo4j_task:
  description: >
    Push the article to the Neo4j database.
  expected_output: >
    A confirmation message that the article has been pushed to the Neo4j database.
  agent: news_reporter_agent
  context: [news_reporting_task]
